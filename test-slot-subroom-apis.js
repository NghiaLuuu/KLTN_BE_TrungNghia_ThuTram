/**
 * Script ƒë·ªÉ test th·ª±c t·∫ø API Slot Management v·ªõi SubRoom logic
 * S·ª≠ d·ª•ng d·ªØ li·ªáu th·∫≠t t·ª´ request c·ªßa b·∫°n
 */

const axios = require('axios').default;

// Configuration
const BASE_URL = 'http://localhost:3002';
const AUTH_TOKEN = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'; // Thay b·∫±ng token th·∫≠t

// Test data t·ª´ request c·ªßa b·∫°n
const TEST_DATA = {
  roomId: "68dd31c43df7b61e7b509e61",
  // subRoomId: "68dd2e1d3df7b61e7b509e42", // Comment/uncomment ƒë·ªÉ test
  quarter: 4,
  year: 2025,
  shifts: ["Ca S√°ng", "Ca Chi·ªÅu"],
  dentistIds: ["68d9f8bab5a75931c6cd0d7d"],
  nurseIds: ["68dd3147327b922b6119b8ed"]
};

async function testAPI(endpoint, data, expectedResult = 'success') {
  try {
    console.log(`\nüß™ Testing ${endpoint}...`);
    console.log('üì§ Request data:', JSON.stringify(data, null, 2));
    
    const response = await axios.post(`${BASE_URL}${endpoint}`, data, {
      headers: {
        'Authorization': AUTH_TOKEN,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ SUCCESS Response:', JSON.stringify(response.data, null, 2));
    return { success: true, data: response.data };
    
  } catch (error) {
    if (error.response) {
      console.log('‚ùå ERROR Response:', JSON.stringify(error.response.data, null, 2));
      return { success: false, error: error.response.data };
    } else {
      console.log('üí• REQUEST FAILED:', error.message);
      return { success: false, error: error.message };
    }
  }
}

async function runTests() {
  console.log('üöÄ STARTING SLOT SUBROOM LOGIC TESTS');
  console.log('=' .repeat(60));

  // TEST 1: REASSIGN-STAFF v·ªõi data g·ªëc (c√≥ comment subRoomId)
  console.log('\n1Ô∏è‚É£ TEST: REASSIGN-STAFF - Ph√≤ng kh√¥ng c√≥ subroom nh∆∞ng g·ª≠i subRoomId');
  const dataWithSubRoom = { ...TEST_DATA, subRoomId: "68dd2e1d3df7b61e7b509e42" };
  await testAPI('/api/slots/reassign-staff', dataWithSubRoom, 'error');

  // TEST 2: REASSIGN-STAFF kh√¥ng g·ª≠i subRoomId  
  console.log('\n2Ô∏è‚É£ TEST: REASSIGN-STAFF - Ph√≤ng kh√¥ng c√≥ subroom v√† kh√¥ng g·ª≠i subRoomId');
  const dataWithoutSubRoom = { ...TEST_DATA };
  delete dataWithoutSubRoom.subRoomId;
  await testAPI('/api/slots/reassign-staff', dataWithoutSubRoom, 'success');

  // TEST 3: ASSIGN-STAFF v·ªõi logic t∆∞∆°ng t·ª±
  console.log('\n3Ô∏è‚É£ TEST: ASSIGN-STAFF - V·ªõi subRoomId kh√¥ng h·ª£p l·ªá');
  await testAPI('/api/slots/assign-staff', dataWithSubRoom, 'error');

  // TEST 4: Ki·ªÉm tra available quarters
  console.log('\n4Ô∏è‚É£ TEST: GET available quarters');
  try {
    const response = await axios.get(`${BASE_URL}/api/slots/available-quarters`, {
      headers: { 'Authorization': AUTH_TOKEN }
    });
    console.log('‚úÖ Available quarters:', JSON.stringify(response.data, null, 2));
  } catch (error) {
    console.log('‚ùå Failed to get quarters:', error.response?.data || error.message);
  }

  // TEST 5: Ki·ªÉm tra available shifts  
  console.log('\n5Ô∏è‚É£ TEST: GET available shifts');
  try {
    const response = await axios.get(`${BASE_URL}/api/slots/available-shifts`, {
      headers: { 'Authorization': AUTH_TOKEN }
    });
    console.log('‚úÖ Available shifts:', JSON.stringify(response.data, null, 2));
  } catch (error) {
    console.log('‚ùå Failed to get shifts:', error.response?.data || error.message);
  }

  console.log('\n' + '='.repeat(60));
  console.log('üèÅ TESTS COMPLETED');
  console.log(`
üí° NOTES:
  - N·∫øu l·ªói 403: C·∫ßn token v·ªõi role manager/admin
  - N·∫øu l·ªói 500 "users_cache kh√¥ng t·ªìn t·∫°i": C·∫ßn start auth-service tr∆∞·ªõc
  - N·∫øu l·ªói "kh√¥ng t√¨m th·∫•y l·ªãch": C·∫ßn t·∫°o schedule cho qu√Ω 4/2025 tr∆∞·ªõc
  - Thay ƒë·ªïi roomId/subRoomId d·ª±a tr√™n data th·∫≠t trong database
  `);
}

// Ch·∫°y tests
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { runTests, testAPI };