const mongoose = require('mongoose');

// ---------------- SubRoom Schema ----------------
const subRoomSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true,
    validate: {
      validator: function(v) {
        // Ch·ªâ cho ph√©p format "Bu·ªìng X" where X l√† s·ªë
        return /^Bu·ªìng \d+$/.test(v);
      },
      message: 'T√™n bu·ªìng ph·∫£i c√≥ ƒë·ªãnh d·∫°ng "Bu·ªìng X" (X l√† s·ªë)'
    }
  },
  isActive: {
    type: Boolean,
    default: true,
  },
  hasBeenUsed: {
    type: Boolean,
    default: false
  }
}, { _id: true });

// ---------------- Room Schema ----------------
const roomSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true,
    unique: true, // index MongoDB, v·∫´n gi·ªØ ƒë·ªÉ performance
  },
  // Tr∆∞·ªùng ph√¢n bi·ªát lo·∫°i ph√≤ng
  hasSubRooms: {
    type: Boolean,
    required: true,
    default: false,
  },
  // Ch·ªâ √°p d·ª•ng cho ph√≤ng KH√îNG c√≥ subroom (hasSubRooms = false)
  maxDoctors: {
    type: Number,
    min: 0,
    // üîß FIX: B·ªè required v√¨ 0 l√† gi√° tr·ªã h·ª£p l·ªá, d√πng custom validator thay th·∫ø
    validate: {
      validator: function(v) {
        // N·∫øu hasSubRooms = true th√¨ kh√¥ng ƒë∆∞·ª£c c√≥ maxDoctors
        if (this.hasSubRooms && v !== undefined) {
          return false;
        }
        // N·∫øu hasSubRooms = false th√¨ ph·∫£i c√≥ maxDoctors (k·ªÉ c·∫£ 0)
        if (!this.hasSubRooms && (v === undefined || v === null)) {
          return false;
        }
        return true;
      },
      message: 'Ph√≤ng kh√¥ng c√≥ bu·ªìng con ph·∫£i c√≥ maxDoctors, ph√≤ng c√≥ bu·ªìng con kh√¥ng ƒë∆∞·ª£c c√≥ maxDoctors'
    }
  },
  maxNurses: {
    type: Number,
    min: 0,
    // üîß FIX: B·ªè required v√¨ 0 l√† gi√° tr·ªã h·ª£p l·ªá, d√πng custom validator thay th·∫ø
    validate: {
      validator: function(v) {
        // N·∫øu hasSubRooms = true th√¨ kh√¥ng ƒë∆∞·ª£c c√≥ maxNurses
        if (this.hasSubRooms && v !== undefined) {
          return false;
        }
        // N·∫øu hasSubRooms = false th√¨ ph·∫£i c√≥ maxNurses (k·ªÉ c·∫£ 0)
        if (!this.hasSubRooms && (v === undefined || v === null)) {
          return false;
        }
        return true;
      },
      message: 'Ph√≤ng kh√¥ng c√≥ bu·ªìng con ph·∫£i c√≥ maxNurses, ph√≤ng c√≥ bu·ªìng con kh√¥ng ƒë∆∞·ª£c c√≥ maxNurses'
    }
  },
  // Ch·ªâ √°p d·ª•ng cho ph√≤ng C√ì subroom (hasSubRooms = true)
  subRooms: {
    type: [subRoomSchema],
    validate: {
      validator: function(v) {
        // N·∫øu hasSubRooms = true th√¨ ph·∫£i c√≥ √≠t nh·∫•t 1 subroom
        if (this.hasSubRooms && (!v || v.length === 0)) {
          return false;
        }
        // N·∫øu hasSubRooms = false th√¨ kh√¥ng ƒë∆∞·ª£c c√≥ subroom
        if (!this.hasSubRooms && v && v.length > 0) {
          return false;
        }
        return true;
      },
      message: 'Ph√≤ng c√≥ bu·ªìng con ph·∫£i c√≥ √≠t nh·∫•t 1 bu·ªìng, ph√≤ng kh√¥ng c√≥ bu·ªìng con kh√¥ng ƒë∆∞·ª£c c√≥ subRooms'
    }
  },
  isActive: {
    type: Boolean,
    default: true,
  },
  autoScheduleEnabled: {
    type: Boolean,
    default: true,
    index: true
  },
  hasBeenUsed: {
    type: Boolean,
    default: false,
    index: true
  },
  lastScheduleGenerated: {
    type: Date,
    default: null
  }
}, {
  timestamps: true,
});

// ---------------- Helper ----------------
function checkDuplicateSubRooms(subRooms, next) {
  if (!Array.isArray(subRooms)) return next();
  const names = subRooms.map(sr => sr.name.trim().toLowerCase());
  const hasDuplicate = names.some((name, idx) => names.indexOf(name) !== idx);
  if (hasDuplicate) {
    return next(new Error("T√™n bu·ªìng kh√¥ng ƒë∆∞·ª£c tr√πng trong c√πng m·ªôt ph√≤ng"));
  }
  next();
}

// ---------------- Pre-save ----------------
roomSchema.pre('save', async function(next) {
  const room = this;

  // 1Ô∏è‚É£ Validate hasSubRooms logic
  if (room.hasSubRooms) {
    // Ph√≤ng c√≥ subrooms: ph·∫£i c√≥ √≠t nh·∫•t 1 subroom, kh√¥ng ƒë∆∞·ª£c c√≥ maxDoctors/maxNurses
    if (!room.subRooms || room.subRooms.length === 0) {
      return next(new Error('Ph√≤ng c√≥ bu·ªìng con ph·∫£i c√≥ √≠t nh·∫•t 1 bu·ªìng'));
    }
    if (room.maxDoctors !== undefined || room.maxNurses !== undefined) {
      return next(new Error('Ph√≤ng c√≥ bu·ªìng con kh√¥ng ƒë∆∞·ª£c c√≥ maxDoctors ho·∫∑c maxNurses'));
    }
  } else {
    // Ph√≤ng kh√¥ng c√≥ subrooms: ph·∫£i c√≥ maxDoctors/maxNurses (c√≥ th·ªÉ = 0), kh√¥ng ƒë∆∞·ª£c c√≥ subrooms
    if (room.maxDoctors === undefined || room.maxDoctors === null || 
        room.maxNurses === undefined || room.maxNurses === null) {
      return next(new Error('Ph√≤ng kh√¥ng c√≥ bu·ªìng con ph·∫£i c√≥ maxDoctors v√† maxNurses'));
    }
    
    // üîß FIX: Validate √≠t nh·∫•t 1 ng∆∞·ªùi (nha sƒ© ho·∫∑c y t√°)
    if (room.maxDoctors + room.maxNurses < 1) {
      return next(new Error('Ph√≤ng ph·∫£i c√≥ √≠t nh·∫•t 1 nha sƒ© ho·∫∑c 1 y t√°'));
    }
    
    if (room.subRooms && room.subRooms.length > 0) {
      return next(new Error('Ph√≤ng kh√¥ng c√≥ bu·ªìng con kh√¥ng ƒë∆∞·ª£c c√≥ subRooms'));
    }
  }

  // 2Ô∏è‚É£ Check duplicate subRoom (ch·ªâ n·∫øu c√≥ subrooms)
  if (room.hasSubRooms && room.subRooms && room.subRooms.length > 0) {
    checkDuplicateSubRooms(room.subRooms, (err) => {
      if (err) return next(err);
    });
  }

  // 3Ô∏è‚É£ Check duplicate Room.name
  const existing = await mongoose.models.Room.findOne({ name: room.name });
  if (existing && existing._id.toString() !== room._id.toString()) {
    return next(new Error(`Ph√≤ng "${room.name}" ƒë√£ t·ªìn t·∫°i`));
  }

  next();
});

// ---------------- Pre-update (findOneAndUpdate) ----------------
roomSchema.pre('findOneAndUpdate', async function(next) {
  const update = this.getUpdate();

  // L·∫•y document hi·ªán t·∫°i ƒë·ªÉ ki·ªÉm tra
  const currentDoc = await this.model.findOne(this.getQuery());
  if (!currentDoc) {
    return next(new Error('Kh√¥ng t√¨m th·∫•y ph√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t'));
  }

  // T·∫°o object merged ƒë·ªÉ validate
  const merged = { ...currentDoc.toObject(), ...update.$set, ...update };
  
  // 1Ô∏è‚É£ Validate hasSubRooms logic
  if (merged.hasSubRooms) {
    // Ph√≤ng c√≥ subrooms: ph·∫£i c√≥ √≠t nh·∫•t 1 subroom, kh√¥ng ƒë∆∞·ª£c c√≥ maxDoctors/maxNurses
    if (!merged.subRooms || merged.subRooms.length === 0) {
      return next(new Error('Ph√≤ng c√≥ bu·ªìng con ph·∫£i c√≥ √≠t nh·∫•t 1 bu·ªìng'));
    }
    if (merged.maxDoctors !== undefined || merged.maxNurses !== undefined) {
      return next(new Error('Ph√≤ng c√≥ bu·ªìng con kh√¥ng ƒë∆∞·ª£c c√≥ maxDoctors ho·∫∑c maxNurses'));
    }
  } else {
    // Ph√≤ng kh√¥ng c√≥ subrooms: ph·∫£i c√≥ maxDoctors/maxNurses (c√≥ th·ªÉ = 0), kh√¥ng ƒë∆∞·ª£c c√≥ subrooms
    if (merged.maxDoctors === undefined || merged.maxDoctors === null || 
        merged.maxNurses === undefined || merged.maxNurses === null) {
      return next(new Error('Ph√≤ng kh√¥ng c√≥ bu·ªìng con ph·∫£i c√≥ maxDoctors v√† maxNurses'));
    }
    
    // üîß FIX: Validate √≠t nh·∫•t 1 ng∆∞·ªùi (nha sƒ© ho·∫∑c y t√°)
    if (merged.maxDoctors + merged.maxNurses < 1) {
      return next(new Error('Ph√≤ng ph·∫£i c√≥ √≠t nh·∫•t 1 nha sƒ© ho·∫∑c 1 y t√°'));
    }
    
    if (merged.subRooms && merged.subRooms.length > 0) {
      return next(new Error('Ph√≤ng kh√¥ng c√≥ bu·ªìng con kh√¥ng ƒë∆∞·ª£c c√≥ subRooms'));
    }
  }

  // 2Ô∏è‚É£ Check subRooms tr√πng (ch·ªâ n·∫øu c√≥ subrooms)
  const subRooms = update?.$set?.subRooms || update?.subRooms;
  if (merged.hasSubRooms && subRooms && subRooms.length > 0) {
    checkDuplicateSubRooms(subRooms, (err) => {
      if (err) return next(err);
    });
  }

  // 3Ô∏è‚É£ Check Room.name tr√πng
  const newName = update?.$set?.name || update?.name;
  if (newName && newName !== currentDoc.name) {
    const existing = await mongoose.models.Room.findOne({ name: newName });
    if (existing && existing._id.toString() !== currentDoc._id.toString()) {
      return next(new Error(`Ph√≤ng "${newName}" ƒë√£ t·ªìn t·∫°i`));
    }
  }

  next();
});

module.exports = mongoose.model('Room', roomSchema);
