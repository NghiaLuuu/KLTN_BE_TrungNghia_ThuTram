const authService = require('../services/auth.service');

exports.register = async (req, res) => {
  try {
    const user = await authService.register(req.body);
    res.status(201).json({ message: 'ƒêƒÉng k√Ω ng∆∞·ªùi d√πng th√†nh c√¥ng', user });
  } catch (err) {
    res.status(400).json({ message: err.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i' });
  }
};

exports.login = async (req, res) => {
  try {
    const { login, password, role } = req.body; // üÜï Th√™m role (optional)
    const result = await authService.login({ login, password, role });
    res.status(200).json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng', ...result });
  } catch (err) {
    res.status(401).json({ message: err.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i' });
  }
};


exports.logout = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { refreshToken } = req.body;

    if (!refreshToken) {
      return res.status(400).json({ message: 'Thi·∫øu refreshToken' });
    }

    await authService.logout(userId, refreshToken);
    res.status(200).json({ message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' });
  } catch (err) {
    res.status(500).json({ message: err.message || 'ƒêƒÉng xu·∫•t th·∫•t b·∫°i' });
  }
};

exports.refresh = async (req, res) => {
  try {
    const { refreshToken } = req.body;
    if (!refreshToken) {
      return res.status(400).json({ message: 'Thi·∫øu refreshToken' });
    }

    const result = await authService.refresh(refreshToken);
    res.status(200).json({ message: 'L√†m m·ªõi token th√†nh c√¥ng', ...result });
  } catch (err) {
    res.status(403).json({ message: err.message || 'L√†m m·ªõi token th·∫•t b·∫°i' });
  }
};

exports.sendOtpRegister = async (req, res) => {
  const { email } = req.body;
  try {
    const result = await authService.sendOtpRegister(email);
    res.json(result);
  } catch (err) {
    res.status(400).json({ message: err.message || 'G·ª≠i OTP ƒëƒÉng k√Ω th·∫•t b·∫°i' });
  }
};

exports.verifyOtpRegister = async (req, res) => {
  const { email, otp } = req.body;
  try {
    const result = await authService.verifyOtpRegister(email, otp);
    res.json(result);
  } catch (err) {
    res.status(400).json({ message: err.message || 'X√°c th·ª±c OTP ƒëƒÉng k√Ω th·∫•t b·∫°i' });
  }
};

exports.sendOtpResetPassword = async (req, res) => {
  const { email } = req.body;
  try {
    const result = await authService.sendOtpResetPassword(email);
    res.json(result);
  } catch (err) {
    res.status(400).json({ message: err.message || 'G·ª≠i OTP qu√™n m·∫≠t kh·∫©u th·∫•t b·∫°i' });
  }
};

exports.changePassword = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { currentPassword, newPassword, confirmPassword } = req.body;

    if (newPassword !== confirmPassword) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp' });
    }

    const result = await authService.changePassword(userId, currentPassword, newPassword);
    res.status(200).json({ message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng', ...result });
  } catch (err) {
    res.status(400).json({ message: err.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i' });
  }
};

exports.resetPassword = async (req, res) => {
  try {
    const { email, otp, newPassword, confirmPassword } = req.body;

    if (newPassword !== confirmPassword) {
      return res.status(400).json({ message: 'M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp' });
    }

    const result = await authService.resetPassword(email, otp, newPassword);
    res.status(200).json({ message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng', ...result });
  } catch (err) {
    res.status(400).json({ message: err.message || 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i' });
  }
};
