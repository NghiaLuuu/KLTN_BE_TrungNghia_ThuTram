const userRepo = require('../repositories/user.repository');
const redis = require('../utils/redis.client');
const bcrypt = require('bcrypt');
const { uploadToS3 } = require('./s3.service');

const USER_CACHE_KEY = 'users_cache';
const DENTIST_CACHE_KEY = 'dentists_public';

// üîπ CACHE OPERATIONS
async function initUserCache() {
  try {
    const users = await userRepo.listUsers();
    await redis.set(USER_CACHE_KEY, JSON.stringify(users));
    console.log(`‚úÖ Cache nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c t·∫£i: ${users.length} nh√¢n vi√™n`);
  } catch (err) {
    console.error('‚ùå L·ªói khi t·∫£i cache ng∆∞·ªùi d√πng:', err);
  }
}

async function refreshUserCache() {
  try {
    const users = await userRepo.listUsers();
    await redis.set(USER_CACHE_KEY, JSON.stringify(users));

    // pick available repo method (compatibility)
    const getDentists = userRepo.getDentistsWithDescription
      || userRepo.getDentistsWithCertificates
      || userRepo.getDentistsForPatients
      || (async () => users.filter(u => u.role === 'dentist'));

    const dentists = await getDentists();
    await redis.set(DENTIST_CACHE_KEY, JSON.stringify(dentists));

    console.log(`‚ôª Cache ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi: ${Array.isArray(users) ? users.length : 0} ng∆∞·ªùi d√πng`);
  } catch (err) {
    console.error('‚ùå L·ªói khi refresh cache:', err);
  }
}

// üîπ BASIC OPERATIONS
exports.createUser = async (data) => {
  const user = await userRepo.createUser(data);
  await refreshUserCache();
  return user;
};

exports.updateUser = async (userId, data, updatedBy = null) => {
  const updated = await userRepo.updateById(userId, data, updatedBy);
  if (!updated) throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t');
  await refreshUserCache();
  return updated;
};

exports.getProfile = async (userId) => {
  if (!userId) throw new Error('Thi·∫øu m√£ ng∆∞·ªùi d√πng');

  let users = await redis.get(USER_CACHE_KEY);
  if (users) {
    users = JSON.parse(users);
    const user = users.find(u => u._id.toString() === userId.toString());
    if (user) return user;
  }

  const userFromDb = await userRepo.findById(userId);
  if (!userFromDb) throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
  return userFromDb;
};

// üîπ LIST & SEARCH OPERATIONS

// üîÑ Enhanced getAllStaff with search, role filter, and sorting
exports.getAllStaff = async (options = {}) => {
  const { 
    page = 1, 
    limit = 10, 
    search = '', 
    role, 
    sortBy = 'name', 
    sortOrder = 'asc' 
  } = options;
  
  const skip = (page - 1) * limit;
  
  // Build filter criteria
  const criteria = {};
  if (search) {
    criteria.$or = [
      { fullName: { $regex: search, $options: 'i' } },
      { email: { $regex: search, $options: 'i' } },
      { phone: { $regex: search, $options: 'i' } }
    ];
  }
  if (role) {
    criteria.role = role;
  }
  
  const [users, total] = await Promise.all([
    userRepo.getAllStaffWithCriteria(criteria, skip, limit, sortBy, sortOrder),
    userRepo.countStaffWithCriteria(criteria),
  ]);

  return {
    total,
    page: Number(page),
    limit: Number(limit),
    totalPages: Math.ceil(total / limit),
    users,
    hasNextPage: page < Math.ceil(total / limit),
    hasPrevPage: page > 1
  };
};

// üÜï New getAllPatients method
exports.getAllPatients = async (options = {}) => {
  const { 
    page = 1, 
    limit = 10, 
    search = '', 
    sortBy = 'name', 
    sortOrder = 'asc' 
  } = options;
  
  const skip = (page - 1) * limit;
  
  // Build filter criteria for patients only
  const criteria = { role: 'patient' };
  if (search) {
    criteria.$or = [
      { fullName: { $regex: search, $options: 'i' } },
      { email: { $regex: search, $options: 'i' } },
      { phone: { $regex: search, $options: 'i' } }
    ];
  }
  
  const [users, total] = await Promise.all([
    userRepo.getAllPatientsWithCriteria(criteria, skip, limit, sortBy, sortOrder),
    userRepo.countPatientsWithCriteria(criteria),
  ]);

  return {
    total,
    page: Number(page),
    limit: Number(limit),
    totalPages: Math.ceil(total / limit),
    users,
    hasNextPage: page < Math.ceil(total / limit),
    hasPrevPage: page > 1
  };
};

// üÜï New updateUserWithPermissions method v·ªõi role-based permissions
exports.updateUserWithPermissions = async (currentUser, targetUserId, updateData) => {
  // L·∫•y th√¥ng tin target user
  const targetUser = await userRepo.findById(targetUserId);
  if (!targetUser) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c·∫ßn c·∫≠p nh·∫≠t');
  }

  // Apply role-based permissions
  const { role: currentRole, userId: currentUserId } = currentUser; // ‚úÖ S·ª≠ d·ª•ng userId thay v√¨ _id
  
  // Validate current user data
  if (!currentUserId || !currentRole) {
    throw new Error('Th√¥ng tin user kh√¥ng h·ª£p l·ªá t·ª´ token');
  }
  
  const isUpdatingSelf = currentUserId.toString() === targetUserId.toString();
  
  // ÔøΩ CERTIFICATE VALIDATION: Ch·ªâ admin/manager m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t certificates
  // V√† t·∫•t c·∫£ certificates ph·∫£i c√≥ isVerified = true khi admin/manager th√™m
  if (updateData.certificates) {
    // Ch·ªâ admin/manager m·ªõi ƒë∆∞·ª£c th√™m/s·ª≠a certificates
    if (!['admin', 'manager'].includes(currentRole)) {
      throw new Error('Ch·ªâ admin v√† manager m·ªõi c√≥ quy·ªÅn qu·∫£n l√Ω ch·ª©ng ch·ªâ');
    }
    
    // ƒê·∫£m b·∫£o target user l√† dentist
    if (targetUser.role !== 'dentist') {
      throw new Error('Ch·ªâ c√≥ th·ªÉ qu·∫£n l√Ω ch·ª©ng ch·ªâ cho nha sƒ©');
    }
    
    // ‚≠ê QUAN TR·ªåNG: T·ª± ƒë·ªông set isVerified = true cho t·∫•t c·∫£ certificates
    // khi admin/manager th√™m/c·∫≠p nh·∫≠t
    updateData.certificates = updateData.certificates.map(cert => ({
      ...cert,
      isVerified: true,
      verifiedBy: cert.isVerified === false ? null : (cert.verifiedBy || currentUserId),
      verifiedAt: cert.isVerified === false ? null : (cert.verifiedAt || new Date())
    }));
  }
  
  // ÔøΩüîí ADMIN RULES
  if (currentRole === 'admin') {
    // Admin kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ch√≠nh m√¨nh
    if (isUpdatingSelf) {
      throw new Error('Admin kh√¥ng th·ªÉ t·ª± c·∫≠p nh·∫≠t th√¥ng tin c·ªßa m√¨nh');
    }
    // Admin c√≥ th·ªÉ c·∫≠p nh·∫≠t t·∫•t c·∫£ role kh√°c (kh√¥ng gi·ªõi h·∫°n field n√†o)
    // Kh√¥ng c√≥ restriction n√†o kh√°c
  }
  
  // üîí MANAGER RULES  
  else if (currentRole === 'manager') {
    // Manager kh√¥ng th·ªÉ c·∫≠p nh·∫≠t admin v√† manager kh√°c
    if (targetUser.role === 'admin' || (targetUser.role === 'manager' && !isUpdatingSelf)) {
      throw new Error('Manager kh√¥ng th·ªÉ c·∫≠p nh·∫≠t admin ho·∫∑c manager kh√°c');
    }
    // Manager c√≥ th·ªÉ c·∫≠p nh·∫≠t t·∫•t c·∫£ user c√≤n l·∫°i (tr·ª´ email + s·ªë ƒëi·ªán tho·∫°i)
    if (updateData.email || updateData.phoneNumber) {
      throw new Error('Manager kh√¥ng th·ªÉ c·∫≠p nh·∫≠t email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i');
    }
  }
  
  // üîí PATIENT RULES
  else if (currentRole === 'patient') {
    // Patient ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t ch√≠nh m√¨nh
    if (!isUpdatingSelf) {
      throw new Error('B·∫°n ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ch√≠nh m√¨nh');
    }
    // Patient kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t email v√† s·ªë ƒëi·ªán tho·∫°i
    if (updateData.email || updateData.phoneNumber) {
      throw new Error('B·∫°n kh√¥ng th·ªÉ c·∫≠p nh·∫≠t email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i');
    }
    // Patient kh√¥ng th·ªÉ thay ƒë·ªïi role
    if (updateData.role) {
      throw new Error('B·∫°n kh√¥ng th·ªÉ thay ƒë·ªïi vai tr√≤ c·ªßa m√¨nh');
    }
  }
  
  // üîí STAFF RULES (dentist, nurse, receptionist, etc.)
  else {
    // C√°c nh√¢n vi√™n kh√°c kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ch√≠nh m√¨nh hay b·∫•t k√¨ ai
    throw new Error(`Nh√¢n vi√™n v·ªõi role '${currentRole}' kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng`);
  }
  
  // Execute update
  const updated = await userRepo.updateById(targetUserId, updateData, currentUserId);
  if (!updated) throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng');
  
  await refreshUserCache();
  return updated;
};

exports.searchStaff = async (criteria = {}, page = 1, limit = 10) => {
  const skip = (page - 1) * limit;
  const [users, total] = await Promise.all([
    userRepo.searchStaff(criteria, skip, limit),
    userRepo.countStaff(criteria),
  ]);

  return {
    total,
    page: Number(page),
    limit: Number(limit),
    totalPages: Math.ceil(total / limit),
    users,
  };
};

// üîπ ADMIN OPERATIONS

exports.getUserById = async (currentUser, userId) => {
  if (!['admin', 'manager'].includes(currentUser.role) && currentUser.userId.toString() !== userId) {
    throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin ng∆∞·ªùi d√πng n√†y');
  }

  const user = await userRepo.findById(userId);
  if (!user) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
  }

  return user;
};

// üÜï DELETE OPERATIONS - Ch·ªâ x√≥a khi ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng
exports.deleteUser = async (currentUser, userId) => {
  if (!['admin', 'manager'].includes(currentUser.role)) {
    throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng');
  }

  if (currentUser.userId.toString() === userId) {
    throw new Error('Kh√¥ng th·ªÉ x√≥a ch√≠nh m√¨nh');
  }

  const user = await userRepo.findById(userId);
  if (!user) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a');
  }

  if (user.role === 'patient') {
    throw new Error('Kh√¥ng th·ªÉ x√≥a b·ªánh nh√¢n t·ª´ auth-service');
  }

  // Kh√¥ng cho ph√©p x√≥a user c√≥ role admin (kh√¥ng ai c√≥ th·ªÉ x√≥a admin)
  if (user.role === 'admin') {
    throw new Error(`Kh√¥ng th·ªÉ x√≥a admin ${user.fullName}. Admin kh√¥ng th·ªÉ b·ªã x√≥a.`);
  }

  // Ch·ªâ admin m·ªõi c√≥ th·ªÉ x√≥a manager
  if (user.role === 'manager' && currentUser.role !== 'admin') {
    throw new Error(`Ch·ªâ admin m·ªõi c√≥ th·ªÉ x√≥a manager ${user.fullName}.`);
  }

  // ÔøΩ Kh√¥ng cho ph√©p x√≥a n·∫øu user ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong h·ªá th·ªëng
  if (user.hasBeenUsed) {
    throw new Error(`Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n ${user.fullName} v√¨ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong h·ªá th·ªëng. Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng ng∆∞ng ho·∫°t ƒë·ªông thay th·∫ø.`);
  }

  // Ch·ªâ cho ph√©p hard delete n·∫øu ch∆∞a c√≥ l·ªãch s·ª≠
  await userRepo.hardDeleteUser(userId);
  await refreshUserCache();
  
  return {
    type: 'hard_delete',
    message: `Nh√¢n vi√™n ${user.fullName} ƒë√£ ƒë∆∞·ª£c x√≥a ho√†n to√†n kh·ªèi h·ªá th·ªëng`,
    user: null
  };
};

// üÜï TOGGLE ACTIVE STATUS - B·∫≠t/t·∫Øt tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa user
exports.toggleUserStatus = async (currentUser, userId) => {
  if (!['admin', 'manager'].includes(currentUser.role)) {
    throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng');
  }

  if (currentUser.userId.toString() === userId) {
    throw new Error('Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i c·ªßa ch√≠nh m√¨nh');
  }

  const user = await userRepo.findById(userId);
  if (!user) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
  }

  if (user.role === 'patient') {
    throw new Error('Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i b·ªánh nh√¢n t·ª´ auth-service');
  }

  // Kh√¥ng cho ph√©p thay ƒë·ªïi tr·∫°ng th√°i admin (kh√¥ng ai c√≥ th·ªÉ t√°c ƒë·ªông admin)
  if (user.role === 'admin') {
    throw new Error(`Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i admin ${user.fullName}. Admin kh√¥ng th·ªÉ b·ªã t√°c ƒë·ªông.`);
  }

  // Ch·ªâ admin m·ªõi c√≥ th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i manager
  if (user.role === 'manager' && currentUser.role !== 'admin') {
    throw new Error(`Ch·ªâ admin m·ªõi c√≥ th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i manager ${user.fullName}.`);
  }

  let updatedUser;
  let actionType;
  let message;

  if (user.isActive) {
    // ƒêang active -> chuy·ªÉn th√†nh inactive (deactivate)
    updatedUser = await userRepo.softDeleteUser(userId, currentUser.userId || 'Ng∆∞ng ho·∫°t ƒë·ªông b·ªüi qu·∫£n tr·ªã vi√™n');
    actionType = 'deactivate';
    message = `Nh√¢n vi√™n ${user.fullName} ƒë√£ ƒë∆∞·ª£c ng∆∞ng ho·∫°t ƒë·ªông`;
  } else {
    // ƒêang inactive -> chuy·ªÉn th√†nh active (reactivate)
    updatedUser = await userRepo.reactivateUser(userId);
    actionType = 'reactivate';
    message = `Nh√¢n vi√™n ${user.fullName} ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i`;
  }

  await refreshUserCache();
  
  return {
    type: actionType,
    message: message,
    user: updatedUser
  };
};

// üÜï CHECK USAGE IN OTHER SERVICES
async function checkUserUsageInSystem(userId) {
  try {
    // TODO: Implement RPC calls to other services
    // const scheduleUsage = await scheduleServiceRPC.checkUserUsage(userId);
    // const appointmentUsage = await appointmentServiceRPC.checkUserUsage(userId);
    
    // Mock implementation for now
    return {
      hasAppointments: false,
      hasSchedules: false,
      appointmentCount: 0,
      scheduleCount: 0
    };
  } catch (error) {
    console.error('Error checking user usage:', error);
    // N·∫øu kh√¥ng check ƒë∆∞·ª£c, m·∫∑c ƒë·ªãnh l√† c√≥ s·ª≠ d·ª•ng ƒë·ªÉ an to√†n
    return {
      hasAppointments: true,
      hasSchedules: true,
      appointmentCount: 1,
      scheduleCount: 1
    };
  }
}

// üîπ UTILITY OPERATIONS

exports.updateUserAvatar = async (userId, file) => {
  if (!file) throw new Error('Ch∆∞a c√≥ file upload');

  const avatarUrl = await uploadToS3(file.buffer, file.originalname, file.mimetype, 'avatars');
  const updatedUser = await userRepo.updateAvatar(userId, avatarUrl);
  
  if (!updatedUser) throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
  
  await refreshUserCache();
  return updatedUser;
};

// üÜï CERTIFICATE OPERATIONS (upload ·∫£nh v·ªõi logic x√°c th·ª±c th√¥ng minh)
exports.uploadCertificate = async (currentUser, userId, file, notes = null) => {
  // Validate currentUser v√† l·∫•y ID linh ho·∫°t
  if (!currentUser || !currentUser.role) {
    throw new Error('Th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá ho·∫∑c token ƒë√£ h·∫øt h·∫°n');
  }

  // L·∫•y ID t·ª´ c√°c field c√≥ th·ªÉ c√≥ trong JWT payload  
  const currentUserId = currentUser.userId || currentUser._id || currentUser.id;
  if (!currentUserId) {
    throw new Error('Token kh√¥ng ch·ª©a th√¥ng tin ID ng∆∞·ªùi d√πng h·ª£p l·ªá');
  }

  // Ch·ªâ admin/manager m·ªõi ƒë∆∞·ª£c upload ch·ª©ng ch·ªâ
  if (!['admin', 'manager'].includes(currentUser.role)) {
    throw new Error('Ch·ªâ admin v√† manager m·ªõi c√≥ quy·ªÅn upload ch·ª©ng ch·ªâ');
  }

  const user = await userRepo.findById(userId);
  if (!user || user.role !== 'dentist') {
    throw new Error('Ch·ªâ c√≥ th·ªÉ upload ch·ª©ng ch·ªâ cho nha sƒ©');
  }

  if (!file) {
    throw new Error('Ch∆∞a c√≥ file ch·ª©ng ch·ªâ ƒë·ªÉ upload');
  }

  // Validate file type
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
  if (!allowedTypes.includes(file.mimetype)) {
    throw new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, PNG, WEBP)');
  }

  // Validate file size (max 5MB)
  if (file.size > 5 * 1024 * 1024) {
    throw new Error('File ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB');
  }

  try {
    // Upload to S3 (s·ª≠ d·ª•ng folder avatars ƒë·ªÉ ƒë·∫£m b·∫£o public nh∆∞ avatar)
    const imageUrl = await uploadToS3(file.buffer, file.originalname, file.mimetype, 'avatars');
    
    // üéØ LOGIC QUAN TR·ªåNG: T·ª± ƒë·ªông x√°c th·ª±c n·∫øu admin/manager upload
    const isAutoVerified = ['admin', 'manager'].includes(currentUser.role);
    
    // Save to database v·ªõi tr·∫°ng th√°i x√°c th·ª±c ph√π h·ª£p
    const certificateData = {
      imageUrl,
      notes,
      isVerified: isAutoVerified,
      verifiedBy: isAutoVerified ? currentUserId : null,
      verifiedAt: isAutoVerified ? new Date() : null
    };

    const updatedUser = await userRepo.addCertificateImage(userId, certificateData);
    await refreshUserCache();
    
    const message = isAutoVerified 
      ? 'Upload v√† x√°c th·ª±c ch·ª©ng ch·ªâ th√†nh c√¥ng (t·ª± ƒë·ªông)' 
      : 'Upload ch·ª©ng ch·ªâ th√†nh c√¥ng (ƒëang ch·ªù x√°c th·ª±c)';
    
    return {
      success: true,
      message,
      user: updatedUser,
      certificateUrl: imageUrl,
      isAutoVerified
    };
  } catch (error) {
    throw new Error(`L·ªói upload ch·ª©ng ch·ªâ: ${error.message}`);
  }
};

exports.uploadMultipleCertificates = async (currentUser, userId, files, notes = null) => {
  // Validate currentUser v√† l·∫•y ID linh ho·∫°t
  if (!currentUser || !currentUser.role) {
    throw new Error('Th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá ho·∫∑c token ƒë√£ h·∫øt h·∫°n');
  }

  const currentUserId = currentUser.userId || currentUser._id || currentUser.id;
  if (!currentUserId) {
    throw new Error('Token kh√¥ng ch·ª©a th√¥ng tin ID ng∆∞·ªùi d√πng h·ª£p l·ªá');
  }

  // Ch·ªâ admin/manager m·ªõi ƒë∆∞·ª£c upload ch·ª©ng ch·ªâ
  if (!['admin', 'manager'].includes(currentUser.role)) {
    throw new Error('Ch·ªâ admin v√† manager m·ªõi c√≥ quy·ªÅn upload ch·ª©ng ch·ªâ');
  }

  const user = await userRepo.findById(userId);
  if (!user || user.role !== 'dentist') {
    throw new Error('Ch·ªâ c√≥ th·ªÉ upload ch·ª©ng ch·ªâ cho nha sƒ©');
  }

  if (!files || files.length === 0) {
    throw new Error('Ch∆∞a c√≥ file ch·ª©ng ch·ªâ ƒë·ªÉ upload');
  }

  if (files.length > 5) {
    throw new Error('Ch·ªâ cho ph√©p upload t·ªëi ƒëa 5 ch·ª©ng ch·ªâ c√πng l√∫c');
  }

  const results = [];
  const errors = [];

  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    
    try {
      // Validate file type
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
      if (!allowedTypes.includes(file.mimetype)) {
        throw new Error(`File ${file.originalname}: Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, PNG, WEBP)`);
      }

      // Validate file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        throw new Error(`File ${file.originalname}: File ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB`);
      }

      // Upload to S3
      const imageUrl = await uploadToS3(file.buffer, file.originalname, file.mimetype, 'avatars');
      
      // Auto verify for admin/manager
      const isAutoVerified = ['admin', 'manager'].includes(currentUser.role);
      
      // Save to database
      const certificateData = {
        imageUrl,
        notes: Array.isArray(notes) ? notes[i] : notes,
        isVerified: isAutoVerified,
        verifiedBy: isAutoVerified ? currentUserId : null,
        verifiedAt: isAutoVerified ? new Date() : null
      };

      await userRepo.addCertificateImage(userId, certificateData);
      
      results.push({
        fileName: file.originalname,
        imageUrl,
        success: true
      });

    } catch (error) {
      errors.push({
        fileName: file.originalname,
        error: error.message,
        success: false
      });
    }
  }

  await refreshUserCache();
  
  return {
    success: errors.length === 0,
    message: `Upload ho√†n t·∫•t: ${results.length} th√†nh c√¥ng, ${errors.length} l·ªói`,
    results,
    errors,
    totalUploaded: results.length
  };
};

// üö® DEPRECATED: S·ª≠ d·ª•ng batchDeleteCertificates thay th·∫ø
exports.deleteCertificate = async (currentUser, userId, certificateId) => {
  if (!['admin', 'manager'].includes(currentUser.role) && currentUser.userId.toString() !== userId) {
    throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ch·ª©ng ch·ªâ');
  }

  // üõ°Ô∏è Validate user is dentist first
  const user = await userRepo.findById(userId);
  if (!user) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
  }
  if (user.role !== 'dentist') {
    throw new Error('Ch·ªâ c√≥ th·ªÉ x√≥a ch·ª©ng ch·ªâ c·ªßa nha sƒ©');
  }

  // üõ°Ô∏è Verify certificate belongs to this dentist
  const existingCert = user.certificates?.find(cert => cert.certificateId === certificateId);
  if (!existingCert) {
    throw new Error(`Ch·ª©ng ch·ªâ ${certificateId} kh√¥ng thu·ªôc v·ªÅ nha sƒ© ${user.fullName}`);
  }

  const updatedUser = await userRepo.deleteCertificate(userId, certificateId);
  if (!updatedUser) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ ƒë·ªÉ x√≥a');
  }

  await refreshUserCache();
  return updatedUser;
};

// üÜï ADMIN-ONLY: Verify certificate
exports.verifyCertificate = async (currentUser, userId, certificateId, isVerified = true) => {
  if (!['admin', 'manager'].includes(currentUser.role)) {
    throw new Error('Ch·ªâ admin/manager m·ªõi c√≥ quy·ªÅn x√°c th·ª±c ch·ª©ng ch·ªâ');
  }

  const updatedUser = await userRepo.verifyCertificate(userId, certificateId, isVerified, currentUser.userId);
  if (!updatedUser) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ ƒë·ªÉ x√°c th·ª±c');
  }

  await refreshUserCache();
  return updatedUser;
};

exports.updateCertificateNotes = async (currentUser, userId, certificateId, notes) => {
  if (!['admin', 'manager'].includes(currentUser.role) && currentUser.userId.toString() !== userId) {
    throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t ghi ch√∫ ch·ª©ng ch·ªâ');
  }

  const updatedUser = await userRepo.updateCertificateNotes(userId, certificateId, notes);
  if (!updatedUser) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ ƒë·ªÉ c·∫≠p nh·∫≠t');
  }

  await refreshUserCache();
  return updatedUser;
};

// üîç HELPER: Check duplicate image URLs across all dentists
async function checkDuplicateImageUrls(imageFiles) {
  if (!imageFiles || imageFiles.length === 0) return;

  // Get all existing image URLs from all dentists
  const allDentists = await userRepo.getDentistsWithCertificates();
  const existingUrls = new Set();
  
  allDentists.forEach(dentist => {
    dentist.certificates?.forEach(cert => {
      if (cert.frontImage) existingUrls.add(cert.frontImage);
      if (cert.backImage) existingUrls.add(cert.backImage);
    });
  });

  // Generate URLs for new images to check for duplicates
  for (const imageFile of imageFiles) {
    if (!imageFile || !imageFile.buffer) continue;
    
    // Generate the same URL that would be created by uploadToS3
    const { v4: uuidv4 } = require('uuid');
    const key = `avatars/${uuidv4()}-${imageFile.originalname}`;
    const potentialUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${key}`;
    
    // Check if this exact image content already exists (by comparing buffer hash)
    const crypto = require('crypto');
    const imageHash = crypto.createHash('md5').update(imageFile.buffer).digest('hex');
    
    // Check against existing certificates for same image content
    for (const dentist of allDentists) {
      for (const cert of dentist.certificates || []) {
        // This is a simplified check - in production you might want to store image hashes
        // For now, we'll check file name similarity as a basic duplicate detection
        if (cert.frontImage?.includes(imageFile.originalname) || 
            cert.backImage?.includes(imageFile.originalname)) {
          throw new Error(`·∫¢nh ch·ª©ng ch·ªâ "${imageFile.originalname}" c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng. Vui l√≤ng s·ª≠ d·ª•ng ·∫£nh kh√°c.`);
        }
      }
    }
  }
}

// üÜï BATCH-ONLY Certificate Management Methods

// üÜï BATCH Operations for Certificates

exports.batchCreateCertificates = async (currentUser, userId, { names, frontImages, backImages, certificateNotes }) => {
  // Permission check - CH·ªà admin/manager m·ªõi ƒë∆∞·ª£c t·∫°o
  if (!['admin', 'manager'].includes(currentUser.role)) {
    throw new Error('Ch·ªâ admin v√† manager m·ªõi c√≥ quy·ªÅn t·∫°o ch·ª©ng ch·ªâ');
  }

  const user = await userRepo.findById(userId);
  if (!user) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
  }

  if (user.role !== 'dentist') {
    throw new Error('Ch·ªâ nha sƒ© m·ªõi c√≥ th·ªÉ c√≥ ch·ª©ng ch·ªâ');
  }

  // Validate names data
  if (names.length !== frontImages.length) {
    throw new Error('S·ªë l∆∞·ª£ng t√™n ch·ª©ng ch·ªâ ph·∫£i b·∫±ng s·ªë l∆∞·ª£ng ·∫£nh m·∫∑t tr∆∞·ªõc');
  }

  // Check for duplicate names in request
  const requestNames = names.map(name => name?.toLowerCase().trim()).filter(Boolean);
  if (new Set(requestNames).size !== requestNames.length) {
    throw new Error('Kh√¥ng ƒë∆∞·ª£c tr√πng t√™n ch·ª©ng ch·ªâ trong c√πng m·ªôt request');
  }

  // Check for duplicate names with existing certificates
  const existingCertNames = user.certificates?.map(cert => cert.name?.toLowerCase().trim()).filter(Boolean) || [];
  for (const name of requestNames) {
    if (existingCertNames.includes(name.toLowerCase().trim())) {
      throw new Error(`Ch·ª©ng ch·ªâ "${name}" ƒë√£ t·ªìn t·∫°i`);
    }
  }

  // üÜï Ki·ªÉm tra tr√πng URL ·∫£nh v·ªõi t·∫•t c·∫£ dentist kh√°c
  await checkDuplicateImageUrls(frontImages.concat(backImages.filter(Boolean)));

  // Upload images and create certificates
  const { uploadToS3 } = require('./s3.service');
  const { v4: uuidv4 } = require('uuid');
  
  // ‚≠ê Get currentUserId for verifiedBy field
  const currentUserId = currentUser.userId || currentUser._id || currentUser.id;
  
  const newCertificates = [];
  
  for (let i = 0; i < names.length; i++) {
    const name = names[i];
    const frontImage = frontImages[i];
    const backImage = backImages[i] || null;
    
    const certificateId = `cert_${userId}_${Date.now()}_${uuidv4().slice(0, 8)}_${i}`;
    
    const frontImageUrl = await uploadToS3(frontImage.buffer, frontImage.originalname, frontImage.mimetype, 'avatars');
    const backImageUrl = backImage ? await uploadToS3(backImage.buffer, backImage.originalname, backImage.mimetype, 'avatars') : null;
    
    // ‚≠ê QUAN TR·ªåNG: Admin/Manager t·∫°o ch·ª©ng ch·ªâ ‚Üí t·ª± ƒë·ªông verified
    newCertificates.push({
      certificateId,
      name: name.trim(),
      frontImage: frontImageUrl,
      backImage: backImageUrl,
      isVerified: true, // ‚úÖ Auto-verify khi admin/manager t·∫°o
      verifiedBy: currentUserId,
      verifiedAt: new Date(),
      createdAt: new Date(),
      updatedAt: new Date()
    });
  }

  const updatedUser = await userRepo.addMultipleCertificatesAndUpdateNotes(userId, newCertificates, certificateNotes);
  if (!updatedUser) {
    throw new Error('Kh√¥ng th·ªÉ t·∫°o ch·ª©ng ch·ªâ m·ªõi');
  }

  await refreshUserCache();
  return updatedUser;
};

exports.batchUpdateCertificates = async (currentUser, userId, { certificateIds, names, frontImages, backImages, certificateNotes, isVerified }) => {
  // Permission check - CH·ªà admin/manager m·ªõi ƒë∆∞·ª£c update
  if (!['admin', 'manager'].includes(currentUser.role)) {
    throw new Error('Ch·ªâ admin v√† manager m·ªõi c√≥ quy·ªÅn c·∫≠p nh·∫≠t ch·ª©ng ch·ªâ');
  }

  const user = await userRepo.findById(userId);
  if (!user) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
  }

  // üÜï Ki·ªÉm tra user ph·∫£i l√† dentist
  if (user.role !== 'dentist') {
    throw new Error('Ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t ch·ª©ng ch·ªâ c·ªßa nha sƒ©');
  }

  if (!certificateIds || certificateIds.length === 0) {
    throw new Error('Ph·∫£i c√≥ √≠t nh·∫•t 1 certificateId ƒë·ªÉ c·∫≠p nh·∫≠t');
  }

  // üõ°Ô∏è Verify all certificates belong to this specific dentist
  const existingCertIds = user.certificates?.map(cert => cert.certificateId) || [];
  for (const certId of certificateIds) {
    if (!existingCertIds.includes(certId)) {
      throw new Error(`Ch·ª©ng ch·ªâ ${certId} kh√¥ng thu·ªôc v·ªÅ nha sƒ© ${user.fullName}`);
    }
  }

  // üÜï Ki·ªÉm tra tr√πng URL ·∫£nh v·ªõi t·∫•t c·∫£ dentist kh√°c (ch·ªâ khi c√≥ ·∫£nh m·ªõi)
  const newImages = [];
  if (frontImages) newImages.push(...frontImages);
  if (backImages) newImages.push(...backImages.filter(Boolean));
  if (newImages.length > 0) {
    await checkDuplicateImageUrls(newImages);
  }

  // Process each certificate update
  for (let i = 0; i < certificateIds.length; i++) {
    const certificateId = certificateIds[i];
    const name = names?.[i];
    const frontImage = frontImages?.[i];
    const backImage = backImages?.[i];
    
    // Find existing certificate
    const existingCert = user.certificates?.find(cert => cert.certificateId === certificateId);
    if (!existingCert) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ ${certificateId} ƒë·ªÉ c·∫≠p nh·∫≠t`);
    }

    // Ki·ªÉm tra tr√πng t√™n ch·ª©ng ch·ªâ (n·∫øu c·∫≠p nh·∫≠t t√™n)
    if (name !== undefined) {
      const newCertName = name.trim().toLowerCase();
      const otherCertNames = user.certificates
        ?.filter(cert => cert.certificateId !== certificateId)
        ?.map(cert => cert.name?.toLowerCase().trim())
        ?.filter(Boolean) || [];
      
      if (otherCertNames.includes(newCertName)) {
        throw new Error(`Ch·ª©ng ch·ªâ "${name}" ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.`);
      }
    }

    // Prepare certificate update object
    const certificateUpdateData = {
      updatedAt: new Date()
    };

    // Upload new images if provided
    if (frontImage || backImage) {
      const { uploadToS3 } = require('./s3.service');
      
      if (frontImage) {
        certificateUpdateData.frontImage = await uploadToS3(frontImage.buffer, frontImage.originalname, frontImage.mimetype, 'avatars');
      }
      
      if (backImage) {
        certificateUpdateData.backImage = await uploadToS3(backImage.buffer, backImage.originalname, backImage.mimetype, 'avatars');
      }
    }

    // Update certificate name if provided
    if (name !== undefined) {
      certificateUpdateData.name = name.trim();
    }

    // ‚≠ê QUAN TR·ªåNG: Admin/Manager update certificates ‚Üí t·ª± ƒë·ªông verified
    // Kh√¥ng cho ph√©p set isVerified = false t·ª´ request
    if (['admin', 'manager'].includes(currentUser.role)) {
      certificateUpdateData.isVerified = true; // ‚úÖ Lu√¥n lu√¥n true khi admin/manager update
      certificateUpdateData.verifiedBy = currentUser.userId;
      certificateUpdateData.verifiedAt = new Date();
    }

    await userRepo.updateCertificateAndNotes(userId, certificateId, certificateUpdateData, i === 0 ? certificateNotes : undefined);
  }

  // Return updated user
  const updatedUser = await userRepo.findById(userId);
  await refreshUserCache();
  return updatedUser;
};

exports.batchDeleteCertificates = async (currentUser, userId, { certificateIds }) => {
  // Permission check - CH·ªà admin/manager m·ªõi ƒë∆∞·ª£c x√≥a
  if (!['admin', 'manager'].includes(currentUser.role)) {
    throw new Error('Ch·ªâ admin v√† manager m·ªõi c√≥ quy·ªÅn x√≥a ch·ª©ng ch·ªâ');
  }

  const user = await userRepo.findById(userId);
  if (!user) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
  }

  // üÜï Ki·ªÉm tra user ph·∫£i l√† dentist
  if (user.role !== 'dentist') {
    throw new Error('Ch·ªâ c√≥ th·ªÉ x√≥a ch·ª©ng ch·ªâ c·ªßa nha sƒ©');
  }

  if (!certificateIds || certificateIds.length === 0) {
    throw new Error('Ph·∫£i c√≥ √≠t nh·∫•t 1 certificateId ƒë·ªÉ x√≥a');
  }

  // üõ°Ô∏è Verify all certificates exist and belong to this specific dentist
  const existingCertIds = user.certificates?.map(cert => cert.certificateId) || [];
  for (const certId of certificateIds) {
    if (!existingCertIds.includes(certId)) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ ${certId} trong danh s√°ch ch·ª©ng ch·ªâ c·ªßa nha sƒ© ${user.fullName}`);
    }
  }

  // üîç Double-check: Verify certificate ownership before deletion
  const certificatesToDelete = user.certificates?.filter(cert => certificateIds.includes(cert.certificateId)) || [];
  if (certificatesToDelete.length !== certificateIds.length) {
    throw new Error('M·ªôt s·ªë ch·ª©ng ch·ªâ kh√¥ng thu·ªôc v·ªÅ nha sƒ© n√†y');
  }

  // Delete each certificate
  for (const certificateId of certificateIds) {
    await userRepo.deleteCertificate(userId, certificateId);
  }

  // Return updated user
  const updatedUser = await userRepo.findById(userId);
  await refreshUserCache();
  return updatedUser;
};

// Note: deleteCertificate method already exists above, no need to recreate

// üÜï PUBLIC API: Get dentists with certificates for patient selection
exports.getDentistsForPatients = async () => {
  const cached = await redis.get('dentists_public');
  if (cached) return JSON.parse(cached);

  const dentists = await userRepo.getDentistsWithCertificates();
  
  const formattedDentists = dentists.map(dentist => ({
    id: dentist._id,
    name: dentist.fullName,
    avatar: dentist.avatar,
    certificates: {
      total: dentist.certificates.length,
      verified: dentist.certificates.filter(cert => cert.isVerified).length,
      images: dentist.certificates
        .filter(cert => cert.isVerified) // ch·ªâ hi·ªÉn th·ªã ch·ª©ng ch·ªâ ƒë√£ x√°c th·ª±c
        .map(cert => cert.imageUrl)
    }
  }));

  await redis.set('dentists_public', JSON.stringify(formattedDentists), 'EX', 3600); // cache 1 hour
  return formattedDentists;
};

exports.refreshUserCache = refreshUserCache;

// Initialize cache on startup
initUserCache().catch(err => console.error('‚ùå L·ªói khi t·∫£i cache ng∆∞·ªùi d√πng:', err));
