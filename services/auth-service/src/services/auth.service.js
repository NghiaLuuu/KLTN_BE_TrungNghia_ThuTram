// auth.service.js
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const redis = require('../utils/redis.client');
const { generateOtp } = require('../utils/otp.util');
const { sendEmail } = require('../utils/mail.util');
const { refreshUserCache } = require('./user.service');
const {
  generateAccessToken,
  generateRefreshToken,
} = require('../utils/token.util');
const userRepo = require('../repositories/user.repository');

const OTP_EXPIRE_SECONDS = 5 * 60; // 5 ph√∫t
const OTP_VERIFIED_EXPIRE_SECONDS = 10 * 60; // 10 ph√∫t ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω sau khi x√°c th·ª±c

// G·ª≠i OTP ƒëƒÉng k√Ω
exports.sendOtpRegister = async (email) => {
  const existingUser = await userRepo.findByEmail(email);
  if (existingUser) throw new Error('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');

  const code = generateOtp();
  await redis.set(`otp:register:${email}`, code, { EX: OTP_EXPIRE_SECONDS });

  console.log(`M√£ OTP ƒëƒÉng k√Ω (${email}):`, code);
  await sendEmail(email, 'M√£ OTP ƒëƒÉng k√Ω', `M√£ OTP c·ªßa b·∫°n l√†: ${code}`);
  return { message: 'OTP ƒëƒÉng k√Ω ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email' };
};

// G·ª≠i OTP qu√™n m·∫≠t kh·∫©u
exports.sendOtpResetPassword = async (email) => {
  const user = await userRepo.findByEmail(email);
  if (!user) throw new Error('Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng');

  const code = generateOtp();
  await redis.set(`otp:reset:${email}`, code, { EX: OTP_EXPIRE_SECONDS });

  console.log(`M√£ OTP qu√™n m·∫≠t kh·∫©u (${email}):`, code);
  await sendEmail(email, 'M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u', `M√£ OTP c·ªßa b·∫°n l√†: ${code}`);
  return { message: 'OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email' };
};

// X√°c minh OTP
exports.verifyOtp = async (email, code, type) => {
  const key = `otp:${type}:${email}`;
  const storedCode = await redis.get(key);

  if (!storedCode) throw new Error('Kh√¥ng t√¨m th·∫•y m√£ OTP ho·∫∑c m√£ ƒë√£ h·∫øt h·∫°n');
  if (storedCode !== code) throw new Error('M√£ OTP kh√¥ng ch√≠nh x√°c');

  await redis.del(key);
  return true;
};

// X√°c th·ª±c OTP ƒëƒÉng k√Ω v√† l∆∞u tr·∫°ng th√°i ƒë√£ x√°c th·ª±c
exports.verifyOtpRegister = async (email, code) => {
  await exports.verifyOtp(email, code, 'register');

  const verifiedKey = `otp:register:verified:${email}`;
  await redis.set(verifiedKey, 'true', { EX: OTP_VERIFIED_EXPIRE_SECONDS });

  return { message: 'X√°c th·ª±c OTP th√†nh c√¥ng' };
};

// ƒêƒÉng k√Ω
exports.register = async (data) => {
  const { email, phone, password, confirmPassword, role, ...rest } = data;

  if (!email) throw new Error('Thi·∫øu email');
  if (!password) throw new Error('Thi·∫øu m·∫≠t kh·∫©u');
  if (!confirmPassword) throw new Error('Thi·∫øu m·∫≠t kh·∫©u x√°c nh·∫≠n');

  if (password.length < 8 || password.length > 16) {
    throw new Error('M·∫≠t kh·∫©u ph·∫£i c√≥ ƒë·ªô d√†i t·ª´ 8 ƒë·∫øn 16 k√Ω t·ª±');
  }

  if (password !== confirmPassword) {
    throw new Error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
  }

  const [existingEmail, existingPhone] = await Promise.all([
    userRepo.findByEmail(email),
    userRepo.findByPhone(phone),
  ]);

  if (existingEmail) throw new Error('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
  if (existingPhone) throw new Error('S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');

  const verifiedKey = `otp:register:verified:${email}`;
  const isVerified = await redis.get(verifiedKey);
  if (!isVerified) {
    throw new Error('Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c OTP');
  }

  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new (require('../models/user.model'))({
    email,
    password: hashedPassword,
    role,
    phone,
    ...rest,
  });

  const savedUser = await user.save();
  await refreshUserCache(); // C·∫≠p nh·∫≠t cache ngay sau khi ƒëƒÉng k√Ω
  await redis.del(verifiedKey);

  return savedUser;
};

// ƒêƒÉng nh·∫≠p
exports.login = async ({ login, password, role }) => {
  // ‚úÖ T√¨m user theo email/employeeCode/phone (KH√îNG validation format)
  const user = await userRepo.findByLogin(login);
  
  if (!user) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi th√¥ng tin ƒëƒÉng nh·∫≠p n√†y');
  }

  // ‚úÖ Ki·ªÉm tra m·∫≠t kh·∫©u
  const match = await bcrypt.compare(password, user.password);
  if (!match) {
    throw new Error('Sai m·∫≠t kh·∫©u');
  }

  // ‚úÖ Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
  if (!user.isActive) {
    throw new Error('T√†i kho·∫£n ƒë√£ b·ªã t·∫°m kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.');
  }

  // ‚úÖ Ki·ªÉm tra m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh - B·∫ÆT BU·ªòC ƒë·ªïi m·∫≠t kh·∫©u
  const isPatient = user.role === 'patient' || (user.roles && user.roles.length === 1 && user.roles[0] === 'patient');
  const isUsingDefaultPassword = isPatient 
    ? (password === '12345678') // Patient default password
    : (user.employeeCode && password === user.employeeCode); // Staff default password
  
  if (isUsingDefaultPassword) {
    // Generate temp token for password change
    const tempToken = jwt.sign(
      { userId: user._id, type: 'password-change' },
      process.env.JWT_SECRET,
      { expiresIn: '15m' } // 15 minutes to change password
    );
    
    return {
      message: 'C·∫ßn ƒë·ªïi m·∫≠t kh·∫©u',
      pendingData: {
        requiresPasswordChange: true,
        userId: user._id,
        tempToken,
        user: {
          _id: user._id,
          fullName: user.fullName,
          email: user.email,
          employeeCode: user.employeeCode,
          role: user.role
        }
      }
    };
  }

  // ‚úÖ Check if user has multiple roles
  if (user.roles && user.roles.length > 1) {
    // Generate temporary token for role selection
    const tempToken = jwt.sign(
      { userId: user._id, type: 'role-selection' },
      process.env.JWT_SECRET,
      { expiresIn: '10m' } // Short expiry for security
    );
    
    return {
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      pendingData: {
        requiresRoleSelection: true,
        roles: user.roles,
        userId: user._id,
        tempToken,
        user: {
          _id: user._id,
          fullName: user.fullName,
          email: user.email,
          employeeCode: user.employeeCode
        }
      }
    };
  }

  // ‚úÖ Single role - normal login
  const refreshToken = generateRefreshToken(user);
  const accessToken = generateAccessToken(user);

  await userRepo.updateRefreshTokens(user, [refreshToken]);

  return { accessToken, refreshToken, user };
};

// Refresh token
exports.refresh = async (refreshToken) => {
  let payload;
  try {
    payload = jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET);
  } catch (err) {
    throw new Error('Refresh token kh√¥ng h·ª£p l·ªá');
  }

  const user = await userRepo.findById(payload.userId);
  if (!user || !user.refreshTokens.includes(refreshToken)) {
    throw new Error('Refresh token kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã thu h·ªìi');
  }

  // ‚úÖ Preserve activeRole from refresh token payload
  const activeRole = payload.activeRole || user.roles?.[0];
  const newAccessToken = generateAccessToken(user, activeRole);
  const updatedTokens = user.refreshTokens.filter((t) => t !== refreshToken);
  await userRepo.updateRefreshTokens(user, updatedTokens);

  return { accessToken: newAccessToken };
};

// ƒêƒÉng xu·∫•t
exports.logout = async (userId, refreshToken) => {
  const user = await userRepo.findById(userId);
  if (!user) throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');

  if (!user.refreshTokens.includes(refreshToken)) {
    throw new Error('Refresh token kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá');
  }

  const updatedTokens = user.refreshTokens.filter((t) => t !== refreshToken);
  await userRepo.updateRefreshTokens(user, updatedTokens);
};

// ƒê·ªïi m·∫≠t kh·∫©u
exports.changePassword = async (userId, currentPassword, newPassword) => {
  const user = await userRepo.findById(userId);
  if (!user) throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');

  // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
  const isHashed = user.password.startsWith('$2');
  let isMatch = false;

  if (isHashed) {
    isMatch = await bcrypt.compare(currentPassword, user.password);
  } else {
    isMatch = currentPassword === user.password;
  }

  if (!isMatch) throw new Error('M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng');

  if (newPassword.length < 8 || newPassword.length > 16) {
    throw new Error('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ ƒë·ªô d√†i t·ª´ 8 ƒë·∫øn 16 k√Ω t·ª±');
  }

  const hashedPassword = await bcrypt.hash(newPassword, 10);
  user.password = hashedPassword;

  await userRepo.saveUser(user);
  return { message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' };
};

// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
exports.resetPassword = async (email, otp, newPassword) => {
  await exports.verifyOtp(email, otp, 'reset');

  const user = await userRepo.findByEmail(email);
  if (!user) throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');

  if (newPassword.length < 8 || newPassword.length > 16) {
    throw new Error('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ ƒë·ªô d√†i t·ª´ 8 ƒë·∫øn 16 k√Ω t·ª±');
  }

  const hashedPassword = await bcrypt.hash(newPassword, 10);
  user.password = hashedPassword;

  await userRepo.saveUser(user);
  return { message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' };
};

// üÜï Select role after login (for users with multiple roles)
exports.selectRole = async (tempToken, selectedRole) => {
  // Verify temp token
  let payload;
  try {
    payload = jwt.verify(tempToken, process.env.JWT_SECRET);
    if (payload.type !== 'role-selection') {
      throw new Error('Token kh√¥ng h·ª£p l·ªá');
    }
  } catch (err) {
    throw new Error('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
  }

  // Get user
  const user = await userRepo.findById(payload.userId);
  if (!user) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
  }

  // Validate selected role
  if (!user.roles || !user.roles.includes(selectedRole)) {
    throw new Error('Vai tr√≤ kh√¥ng h·ª£p l·ªá');
  }

  // ‚úÖ Generate tokens with selected role as activeRole
  const refreshToken = generateRefreshToken(user, selectedRole);
  const accessToken = generateAccessToken(user, selectedRole);

  await userRepo.updateRefreshTokens(user, [refreshToken]);

  return { accessToken, refreshToken, user };
};

// üÜï Complete forced password change (first login or default password)
exports.completePasswordChange = async (tempToken, newPassword) => {
  // Verify temp token
  let payload;
  try {
    payload = jwt.verify(tempToken, process.env.JWT_SECRET);
    if (payload.type !== 'password-change') {
      throw new Error('Token kh√¥ng h·ª£p l·ªá');
    }
  } catch (err) {
    throw new Error('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
  }

  // Get user
  const user = await userRepo.findById(payload.userId);
  if (!user) {
    throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
  }

  // Validate new password
  if (newPassword.length < 8 || newPassword.length > 16) {
    throw new Error('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ ƒë·ªô d√†i t·ª´ 8 ƒë·∫øn 16 k√Ω t·ª±');
  }

  // Check if new password is same as default password
  const isPatient = user.role === 'patient' || (user.roles && user.roles.length === 1 && user.roles[0] === 'patient');
  if (isPatient && newPassword === '12345678') {
    throw new Error('M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh');
  }
  if (!isPatient && user.employeeCode && newPassword === user.employeeCode) {
    throw new Error('M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m√£ nh√¢n vi√™n');
  }

  // Hash and save new password
  const hashedPassword = await bcrypt.hash(newPassword, 10);
  user.password = hashedPassword;
  user.isFirstLogin = false; // Mark as not first login anymore
  await userRepo.saveUser(user);

  // Generate real tokens and complete login
  const refreshToken = generateRefreshToken(user);
  const accessToken = generateAccessToken(user);
  await userRepo.updateRefreshTokens(user, [refreshToken]);

  return { 
    accessToken, 
    refreshToken, 
    user,
    message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' 
  };
};
