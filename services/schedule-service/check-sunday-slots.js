const mongoose = require('mongoose');

async function checkSundaySlots() {
  try {
    // Th·ª≠ k·∫øt n·ªëi ƒë·∫øn c·∫£ 2 DB ƒë·ªÉ ki·ªÉm tra
    const dbName = process.argv[2] || 'dental_clinic_schedule';
    await mongoose.connect(`mongodb://localhost:27017/${dbName}`);
    console.log(`‚úÖ Connected to MongoDB: ${dbName}`);
    
    const Slot = mongoose.model('Slot', new mongoose.Schema({}, { strict: false, collection: 'slots' }));
    
    const scheduleId = '68fdd4776505d4dfbd458a72';
    
    // C√°c ng√†y Ch·ªß nh·∫≠t trong th√°ng 11/2025
    const sundayDates = [
      '2025-11-02',
      '2025-11-09', 
      '2025-11-16',
      '2025-11-23',
      '2025-11-30'
    ];
    
    console.log('\nüìÖ Ki·ªÉm tra slots cho c√°c ng√†y Ch·ªß nh·∫≠t:');
    
    for (const dateStr of sundayDates) {
      const startOfDay = new Date(dateStr + 'T00:00:00.000Z');
      const endOfDay = new Date(dateStr + 'T23:59:59.999Z');
      
      const count = await Slot.countDocuments({
        scheduleId: new mongoose.Types.ObjectId(scheduleId),
        date: { $gte: startOfDay, $lte: endOfDay }
      });
      
      console.log(`  ${dateStr} (Ch·ªß nh·∫≠t): ${count} slots`);
    }
    
    // T·ªïng slots c·ªßa l·ªãch
    const totalSlots = await Slot.countDocuments({
      scheduleId: new mongoose.Types.ObjectId(scheduleId)
    });
    
    console.log(`\nüìä T·ªïng slots trong l·ªãch: ${totalSlots}`);
    
    await mongoose.disconnect();
    console.log('\n‚úÖ Done');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
    process.exit(1);
  }
}

checkSundaySlots();
