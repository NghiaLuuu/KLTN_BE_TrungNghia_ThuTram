const scheduleRepo = require('../repositories/schedule.repository');
const slotRepo = require('../repositories/slot.repository');
const redisClient = require('../utils/redis.client');

// Helper: ki·ªÉm tra ng√†y h·ª£p l·ªá
function validateDates(startDate, endDate) {
  const today = new Date();
  today.setHours(0, 0, 0, 0); // so s√°nh t·ª´ ƒë·∫ßu ng√†y

  const start = new Date(startDate);
  const end = new Date(endDate);

  if (start < today) {
    throw new Error('Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i t·ª´ h√¥m nay tr·ªü ƒëi');
  }
  if (end < start) {
    throw new Error('Ng√†y k·∫øt th√∫c ph·∫£i sau ho·∫∑c b·∫±ng ng√†y b·∫Øt ƒë·∫ßu');
  }
}


// üîß Check conflict chung
async function checkScheduleConflict(roomId, shiftIds, startDate, endDate, excludeId = null) {
  const filter = {
    roomId,
    shiftIds: { $in: shiftIds },
    $or: [
      {
        startDate: { $lte: new Date(endDate) },
        endDate: { $gte: new Date(startDate) }
      }
    ]
  };
  if (excludeId) filter._id = { $ne: excludeId };
  return await scheduleRepo.findOne(filter);
}

// üîß Core: ch·ªâ sinh danh s√°ch slots (ch∆∞a save DB)
async function generateSlotsCore(scheduleId, subRoomId, shiftIds, slotDuration, startDate, endDate) {
  const shiftCache = await redisClient.get('shifts_cache');
  if (!shiftCache) throw new Error('Kh√¥ng t√¨m th·∫•y b·ªô nh·ªõ ƒë·ªám ca/k√≠p');
  const shifts = JSON.parse(shiftCache);
  const selectedShifts = shifts.filter(s => shiftIds.includes(s._id.toString()));
  if (!selectedShifts.length) return [];

  const slots = [];
  const start = new Date(startDate);
  const end = new Date(endDate);
  const now = new Date();
  const minStart = new Date(now.getTime() + 5 * 60000); // sau 5 ph√∫t

  for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
    for (const shift of selectedShifts) {
      const [startHour, startMinute] = shift.startTime.split(':').map(Number);
      const [endHour, endMinute] = shift.endTime.split(':').map(Number);

      const shiftStart = new Date(d);
      shiftStart.setHours(startHour, startMinute, 0, 0);

      const shiftEnd = new Date(d);
      shiftEnd.setHours(endHour, endMinute, 0, 0);

      // ‚úÖ N·∫øu ca ƒë√£ k·∫øt th√∫c ho√†n to√†n ‚Üí b·ªè qua
      if (shiftEnd <= now) continue;

      for (let cur = new Date(shiftStart); cur < shiftEnd;) {
        const next = new Date(cur.getTime() + slotDuration * 60000);
        if (next > shiftEnd) break;

        // ‚úÖ Ch·ªâ t·∫°o slot b·∫Øt ƒë·∫ßu sau 5 ph√∫t k·ªÉ t·ª´ hi·ªán t·∫°i
        if (cur >= minStart) {
          slots.push({
            date: new Date(d),
            startTime: new Date(cur),
            endTime: next,
            scheduleId,
            subRoomId
          });
        }

        cur = next;
      }
    }
  }
  return slots;
}





// üîß Wrapper: sinh + l∆∞u DB
async function generateSlotsAndSave(scheduleId, subRoomId, shiftIds, slotDuration, startDate, endDate) {
  const slots = await generateSlotsCore(scheduleId, subRoomId, shiftIds, slotDuration, startDate, endDate);
  if (!slots.length) return [];
  const inserted = await slotRepo.insertMany(slots);
  return inserted.map(s => s._id);
}

// ‚úÖ T·∫°o schedule
exports.createSchedule = async (data) => {
  const roomCache = await redisClient.get('rooms_cache');
  if (!roomCache) throw new Error('Kh√¥ng t√¨m th·∫•y b·ªô nh·ªõ ƒë·ªám ph√≤ng');
  const rooms = JSON.parse(roomCache);
  const room = rooms.find(r => r._id.toString() === data.roomId.toString());
  if (!room) throw new Error('Kh√¥ng t√¨m th·∫•y ph√≤ng');

  // üîπ Ki·ªÉm tra conflict
  const conflict = await checkScheduleConflict(data.roomId, data.shiftIds, data.startDate, data.endDate);
  if (conflict) throw new Error(`L·ªãch b·ªã tr√πng v·ªõi schedule ${conflict._id}`);

  // üîπ L·∫•y shift t·ª´ cache ƒë·ªÉ ki·ªÉm tra slotDuration
  const shiftCache = await redisClient.get('shifts_cache');
  if (!shiftCache) throw new Error('Kh√¥ng t√¨m th·∫•y b·ªô nh·ªõ ƒë·ªám ca/k√≠p');
  const shifts = JSON.parse(shiftCache);
  const selectedShifts = shifts.filter(s => data.shiftIds.includes(s._id.toString()));
  if (!selectedShifts.length) throw new Error('Kh√¥ng t√¨m th·∫•y ca/k√≠p h·ª£p l·ªá');

  for (const shift of selectedShifts) {
  const [startHour, startMinute] = shift.startTime.split(':').map(Number);
  const [endHour, endMinute] = shift.endTime.split(':').map(Number);

  const shiftStart = new Date();
  shiftStart.setHours(startHour, startMinute, 0, 0);

  const shiftEnd = new Date();
  shiftEnd.setHours(endHour, endMinute, 0, 0);

  // T·ªïng th·ªùi l∆∞·ª£ng ca (ph√∫t)
  const shiftMinutes = (endHour * 60 + endMinute) - (startHour * 60 + startMinute);

  // Th·ªùi l∆∞·ª£ng c√≤n l·∫°i (ph√∫t) ‚Äì n·∫øu ca ƒëang di·ªÖn ra th√¨ t√≠nh t·ª´ "b√¢y gi·ªù" ƒë·∫øn khi k·∫øt th√∫c
  let remainingMinutes = shiftMinutes;
  const now = new Date();
  if (now >= shiftStart && now < shiftEnd) {
    remainingMinutes = Math.floor((shiftEnd - now) / 60000);
  }

  // N·∫øu slotDuration qu√° l·ªõn so v·ªõi th·ªùi l∆∞·ª£ng c√≤n l·∫°i
  if (data.slotDuration >= remainingMinutes) {
    throw new Error(
      `slotDuration (${data.slotDuration} ph√∫t) kh√¥ng h·ª£p l·ªá cho ca ${shift._id}. ` +
      `Ch·ªâ c√≤n ${remainingMinutes} ph√∫t kh·∫£ d·ª•ng trong ca n√†y.`
    );
  }
}

  
  // ‚úÖ Ki·ªÉm tra ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
  validateDates(data.startDate, data.endDate);

  // üîπ T·∫°o schedule
  const schedule = await scheduleRepo.createSchedule({
    roomId: room._id,
    startDate: data.startDate,
    endDate: data.endDate,
    shiftIds: data.shiftIds,
    slotDuration: data.slotDuration
  });

  // üîπ Sinh slot cho t·∫•t c·∫£ subRoom
  let allSlotIds = [];
  for (const subRoom of room.subRooms) {
    const slotIds = await generateSlotsAndSave(schedule._id, subRoom._id, data.shiftIds, data.slotDuration, data.startDate, data.endDate);
    allSlotIds = allSlotIds.concat(slotIds);
  }

  schedule.slots = allSlotIds;
  await schedule.save();
  return schedule;
};

// ‚úÖ Update schedule
exports.updateSchedule = async (id, data) => {
  const schedule = await scheduleRepo.findById(id);
  if (!schedule) throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch');

  // Kh√¥ng cho ph√©p update shiftIds
  if (data.shiftIds && data.shiftIds.toString() !== schedule.shiftIds.toString()) {
    throw new Error('Kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t shiftIds. ƒê·ªÉ thay ƒë·ªïi ca/k√≠p, h√£y t·∫°o l·ªãch m·ªõi.');
  }

  // Kh√¥ng cho ph√©p update startDate/endDate
  if (data.startDate || data.endDate) {
    const oldStart = new Date(schedule.startDate);
    const oldEnd = new Date(schedule.endDate);
    const newStart = data.startDate ? new Date(data.startDate) : oldStart;
    const newEnd = data.endDate ? new Date(data.endDate) : oldEnd;

    if (newStart.getTime() !== oldStart.getTime() || newEnd.getTime() !== oldEnd.getTime()) {
      throw new Error('Kh√¥ng th·ªÉ thay ƒë·ªïi ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c. N·∫øu mu·ªën t·∫°o l·ªãch m·ªõi, h√£y d√πng createSchedule.');
    }
  }

  const slotDurationChanged = data.slotDuration && data.slotDuration !== schedule.slotDuration;

  if (slotDurationChanged) {
    // üîπ Tr∆∞·ªõc khi regenerate slot, ki·ªÉm tra xem c√≥ slot n√†o ƒë√£ c√≥ dentistId/nurseId/appointmentId kh√¥ng
    const existingSlots = await slotRepo.findSlots({ scheduleId: schedule._id });

    const hasAssignedSlot = existingSlots.some(slot =>
      (slot.dentistId && slot.dentistId.length > 0) ||
      (slot.nurseId && slot.nurseId.length > 0) ||
      (slot.appointmentId !== null)
    );

    if (hasAssignedSlot) {
      throw new Error('Kh√¥ng th·ªÉ thay ƒë·ªïi slotDuration v√¨ ƒë√£ c√≥ slot ch·ª©a dentistId, nurseId ho·∫∑c appointmentId');
    }

    // üîπ L·∫•y shift t·ª´ cache ƒë·ªÉ ki·ªÉm tra slotDuration
    const shiftCache = await redisClient.get('shifts_cache');
    if (!shiftCache) throw new Error('Kh√¥ng t√¨m th·∫•y b·ªô nh·ªõ ƒë·ªám ca/k√≠p');
    const shifts = JSON.parse(shiftCache);
    const selectedShifts = shifts.filter(s => schedule.shiftIds.includes(s._id.toString()));

    for (const shift of selectedShifts) {
      const [startHour, startMinute] = shift.startTime.split(':').map(Number);
      const [endHour, endMinute] = shift.endTime.split(':').map(Number);
      const shiftMinutes = (endHour * 60 + endMinute) - (startHour * 60 + startMinute);
      if (data.slotDuration > shiftMinutes) {
        throw new Error(`slotDuration (${data.slotDuration} ph√∫t) v∆∞·ª£t qu√° ƒë·ªô d√†i c·ªßa ca ${shift._id} (${shiftMinutes} ph√∫t)`);
      }
    }

    // 1Ô∏è‚É£ X√≥a t·∫•t c·∫£ slot c≈©
    await slotRepo.deleteMany({ scheduleId: schedule._id });
    schedule.slots = [];

    // 2Ô∏è‚É£ L·∫•y room t·ª´ cache
    const roomCache = await redisClient.get('rooms_cache');
    if (!roomCache) throw new Error('Kh√¥ng t√¨m th·∫•y b·ªô nh·ªõ ƒë·ªám ph√≤ng');
    const rooms = JSON.parse(roomCache);
    const room = rooms.find(r => r._id.toString() === schedule.roomId.toString());

    // 3Ô∏è‚É£ Sinh slot m·ªõi cho t·∫•t c·∫£ subRoom
    let allSlotIds = [];
    for (const subRoom of room.subRooms) {
      const slotIds = await generateSlotsAndSave(
        schedule._id,
        subRoom._id,
        schedule.shiftIds,
        data.slotDuration,
        schedule.startDate,
        schedule.endDate
      );
      allSlotIds = allSlotIds.concat(slotIds);
    }

    schedule.slots = allSlotIds;
    schedule.slotDuration = data.slotDuration;
  }

  // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng kh√°c (status, note, name‚Ä¶)
  const allowedFields = ['status', 'note', 'name'];
  for (const field of allowedFields) {
    if (data[field] !== undefined) schedule[field] = data[field];
  }

  await schedule.save();
  return schedule;
};

// ‚úÖ T·∫°o slot cho 1 subRoom, nh∆∞ng ch·ªâ n·∫øu ch∆∞a c√≥ slot trong kho·∫£ng ng√†y ƒë√≥

exports.createSlotsForSubRoom = async (scheduleId, subRoomId) => {
  const schedule = await scheduleRepo.findById(scheduleId);
  if (!schedule) {
    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l·ªãch ${scheduleId} cho subRoom ${subRoomId}, b·ªè qua`);
    return null;
  }

  const { startDate, endDate, slotDuration, shiftIds } = schedule;
  console.log(`üìÖ B·∫Øt ƒë·∫ßu t·∫°o slot cho subRoom ${subRoomId} t·ª´ ${startDate} ƒë·∫øn ${endDate}, slotDuration: ${slotDuration} ph√∫t`);

  // Ki·ªÉm tra subRoom ƒë√£ c√≥ slot ch∆∞a
  const existingSlots = await slotRepo.findSlots({
    scheduleId,
    subRoomId,
    date: { $gte: new Date(startDate), $lte: new Date(endDate) }
  });

  if (existingSlots.length > 0) {
    console.log(`‚ö†Ô∏è SubRoom ${subRoomId} ƒë√£ c√≥ ${existingSlots.length} slot trong kho·∫£ng ng√†y, b·ªè qua`);
    return { schedule, createdSlotIds: [] };
  }

  // Sinh slot m·ªõi
  const slotIds = await generateSlotsAndSave(
    schedule._id,
    subRoomId,
    shiftIds,
    slotDuration,
    startDate,
    endDate
  );

  console.log(`‚úÖ ƒê√£ t·∫°o ${slotIds.length} slot m·ªõi cho subRoom ${subRoomId}`);

  schedule.slots = schedule.slots.concat(slotIds);
  await schedule.save();

  return { schedule, createdSlotIds: slotIds };
};




