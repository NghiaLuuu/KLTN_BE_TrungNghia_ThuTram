/**
 * Test Calendar APIs - Room, Dentist, Nurse Calendar v·ªõi Ph√¢n Trang v√† Xem L·ªãch Qu√° Kh·ª©
 * 
 * C√°c API c√≥ s·∫µn:
 * 1. GET /room/:roomId/calendar - L·ªãch ph√≤ng
 * 2. GET /dentist/:dentistId/calendar - L·ªãch nha s·ªπ  
 * 3. GET /nurse/:nurseId/calendar - L·ªãch y t√°
 * 
 * Ph√¢n trang:
 * - page=1: Hi·ªán t·∫°i v√† t∆∞∆°ng lai
 * - page=-1: Qu√° kh·ª© (1 chu k·ª≥ tr∆∞·ªõc)
 * - page=-2: Qu√° kh·ª© (2 chu k·ª≥ tr∆∞·ªõc)
 * - page=2: T∆∞∆°ng lai (2 chu k·ª≥ sau)
 * 
 * ViewType: day, week, month
 * Limit: s·ªë chu k·ª≥ tr·∫£ v·ªÅ (1-100)
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:5006/api/slots';

// Test data
const ROOM_ID = '68dd31c43df7b61e7b509e61';
const DENTIST_ID = '68dd337f327b922b6119b902';
const NURSE_ID = '68dd338d327b922b6119b90d';

async function testRoomCalendar() {
  console.log('\n=== üè• TEST ROOM CALENDAR ===');
  
  try {
    // Test 1: L·ªãch ph√≤ng theo tu·∫ßn - hi·ªán t·∫°i
    console.log('\n1. L·ªãch ph√≤ng theo tu·∫ßn - hi·ªán t·∫°i (page=1):');
    const currentWeek = await axios.get(`${BASE_URL}/room/${ROOM_ID}/calendar`, {
      params: {
        viewType: 'week',
        page: 1,
        limit: 2
      }
    });
    console.log('‚úÖ Current week:', currentWeek.data.data.periods.length, 'periods');
    
    // Test 2: L·ªãch ph√≤ng theo tu·∫ßn - qu√° kh·ª©
    console.log('\n2. L·ªãch ph√≤ng theo tu·∫ßn - qu√° kh·ª© (page=-1):');
    const pastWeek = await axios.get(`${BASE_URL}/room/${ROOM_ID}/calendar`, {
      params: {
        viewType: 'week',
        page: -1,
        limit: 2
      }
    });
    console.log('‚úÖ Past week:', pastWeek.data.data.periods.length, 'periods');
    
    // Test 3: L·ªãch ph√≤ng theo th√°ng - t∆∞∆°ng lai
    console.log('\n3. L·ªãch ph√≤ng theo th√°ng - t∆∞∆°ng lai (page=2):');
    const futureMonth = await axios.get(`${BASE_URL}/room/${ROOM_ID}/calendar`, {
      params: {
        viewType: 'month',
        page: 2,
        limit: 1
      }
    });
    console.log('‚úÖ Future month:', futureMonth.data.data.periods.length, 'periods');
    
  } catch (error) {
    console.error('‚ùå Room calendar test failed:', error.response?.data || error.message);
  }
}

async function testDentistCalendar() {
  console.log('\n=== ü¶∑ TEST DENTIST CALENDAR ===');
  
  try {
    // Test 1: L·ªãch nha s·ªπ theo ng√†y - hi·ªán t·∫°i
    console.log('\n1. L·ªãch nha s·ªπ theo ng√†y - hi·ªán t·∫°i (page=1):');
    const currentDay = await axios.get(`${BASE_URL}/dentist/${DENTIST_ID}/calendar`, {
      params: {
        viewType: 'day',
        page: 1,
        limit: 5
      }
    });
    console.log('‚úÖ Current days:', currentDay.data.data.periods.length, 'periods');
    
    // Test 2: L·ªãch nha s·ªπ theo ng√†y - qu√° kh·ª©
    console.log('\n2. L·ªãch nha s·ªπ theo ng√†y - qu√° kh·ª© (page=-2):');
    const pastDays = await axios.get(`${BASE_URL}/dentist/${DENTIST_ID}/calendar`, {
      params: {
        viewType: 'day',
        page: -2,
        limit: 5
      }
    });
    console.log('‚úÖ Past days:', pastDays.data.data.periods.length, 'periods');
    
    // Test 3: L·ªãch nha s·ªπ theo tu·∫ßn
    console.log('\n3. L·ªãch nha s·ªπ theo tu·∫ßn (page=1):');
    const week = await axios.get(`${BASE_URL}/dentist/${DENTIST_ID}/calendar`, {
      params: {
        viewType: 'week',
        page: 1,
        limit: 3
      }
    });
    console.log('‚úÖ Weekly view:', week.data.data.periods.length, 'periods');
    
  } catch (error) {
    console.error('‚ùå Dentist calendar test failed:', error.response?.data || error.message);
  }
}

async function testNurseCalendar() {
  console.log('\n=== üíâ TEST NURSE CALENDAR ===');
  
  try {
    // Test 1: L·ªãch y t√° theo th√°ng - hi·ªán t·∫°i
    console.log('\n1. L·ªãch y t√° theo th√°ng - hi·ªán t·∫°i (page=1):');
    const currentMonth = await axios.get(`${BASE_URL}/nurse/${NURSE_ID}/calendar`, {
      params: {
        viewType: 'month',
        page: 1,
        limit: 2
      }
    });
    console.log('‚úÖ Current months:', currentMonth.data.data.periods.length, 'periods');
    
    // Test 2: L·ªãch y t√° theo th√°ng - qu√° kh·ª©
    console.log('\n2. L·ªãch y t√° theo th√°ng - qu√° kh·ª© (page=-1):');
    const pastMonth = await axios.get(`${BASE_URL}/nurse/${NURSE_ID}/calendar`, {
      params: {
        viewType: 'month',
        page: -1,
        limit: 1
      }
    });
    console.log('‚úÖ Past month:', pastMonth.data.data.periods.length, 'periods');
    
  } catch (error) {
    console.error('‚ùå Nurse calendar test failed:', error.response?.data || error.message);
  }
}

async function runAllTests() {
  console.log('üöÄ TESTING CALENDAR APIs WITH PAGINATION & HISTORICAL DATA');
  console.log('Base URL:', BASE_URL);
  
  await testRoomCalendar();
  await testDentistCalendar();
  await testNurseCalendar();
  
  console.log('\n‚ú® All tests completed!');
  console.log('\nüìã API Usage Examples:');
  console.log(`
  üè• Room Calendar:
  GET ${BASE_URL}/room/${ROOM_ID}/calendar?viewType=week&page=1&limit=2
  
  ü¶∑ Dentist Calendar:
  GET ${BASE_URL}/dentist/${DENTIST_ID}/calendar?viewType=day&page=-1&limit=5
  
  üíâ Nurse Calendar:
  GET ${BASE_URL}/nurse/${NURSE_ID}/calendar?viewType=month&page=2&limit=1
  
  üìÖ Pagination Examples:
  - page=1: Hi·ªán t·∫°i (chu k·ª≥ 0 ‚Üí limit-1)
  - page=2: T∆∞∆°ng lai (chu k·ª≥ limit ‚Üí 2*limit-1)  
  - page=-1: Qu√° kh·ª© g·∫ßn (chu k·ª≥ -limit ‚Üí -1)
  - page=-2: Qu√° kh·ª© xa (chu k·ª≥ -2*limit ‚Üí -limit-1)
  
  üîç ViewType Options:
  - day: Theo ng√†y
  - week: Theo tu·∫ßn (Th·ª© 2 - Ch·ªß nh·∫≠t)
  - month: Theo th√°ng
  `);
}

// Ch·∫°y test n·∫øu file ƒë∆∞·ª£c execute tr·ª±c ti·∫øp
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  testRoomCalendar,
  testDentistCalendar, 
  testNurseCalendar,
  runAllTests
};