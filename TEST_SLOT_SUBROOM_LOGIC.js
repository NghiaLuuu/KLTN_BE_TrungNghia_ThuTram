/**
 * Test Cases cho logic x·ª≠ l√Ω SubRoom trong Slot Management APIs
 * 
 * Ki·ªÉm tra c√°c scenarios:
 * 1. Ph√≤ng c√≥ subroom - ph·∫£i ch·ªâ ƒë·ªãnh subRoomId
 * 2. Ph√≤ng kh√¥ng c√≥ subroom - kh√¥ng ƒë∆∞·ª£c g·ª≠i subRoomId  
 * 3. subRoomId kh√¥ng thu·ªôc v·ªÅ ph√≤ng ƒë√£ ch·ªâ ƒë·ªãnh
 * 4. Update slots t·ª´ nhi·ªÅu room/subroom kh√°c nhau
 */

console.log('üß™ TESTING SLOT SUBROOM LOGIC');

// ===========================================
// TEST 1: API reassign-staff v·ªõi subRoom logic
// ===========================================

const testReassignStaffSubRoomScenarios = [
  {
    name: '‚úÖ SUCCESS: Ph√≤ng c√≥ subroom + ƒë√∫ng subRoomId',
    request: {
      method: 'POST',
      url: 'http://localhost:3002/api/slots/reassign-staff',
      body: {
        roomId: '68dd31c43df7b61e7b509e70', // Ph√≤ng c√≥ subroom
        subRoomId: '68dd2e1d3df7b61e7b509e42', // SubRoom h·ª£p l·ªá
        quarter: 4,
        year: 2025,
        shifts: ['Ca S√°ng'],
        dentistIds: ['68d9f8bab5a75931c6cd0d7d'],
        nurseIds: ['68dd3147327b922b6119b8ed']
      }
    },
    expectedResult: 'SUCCESS - Ph√¢n c√¥ng l·∫°i th√†nh c√¥ng'
  },
  
  {
    name: '‚ùå ERROR: Ph√≤ng kh√¥ng c√≥ subroom nh∆∞ng g·ª≠i subRoomId',
    request: {
      method: 'POST', 
      url: 'http://localhost:3002/api/slots/reassign-staff',
      body: {
        roomId: '68dd31c43df7b61e7b509e61', // Ph√≤ng KH√îNG c√≥ subroom
        subRoomId: '68dd2e1d3df7b61e7b509e42', // Nh∆∞ng v·∫´n g·ª≠i subRoomId
        quarter: 4,
        year: 2025,
        shifts: ['Ca S√°ng'],
        dentistIds: ['68d9f8bab5a75931c6cd0d7d'],
        nurseIds: []
      }
    },
    expectedError: 'Ph√≤ng "[T√äN PH√íNG]" kh√¥ng c√≥ subroom nh∆∞ng b·∫°n ƒë√£ ch·ªâ ƒë·ªãnh subRoomId. Vui l√≤ng b·ªè subRoomId ho·∫∑c ch·ªçn ph√≤ng kh√°c.'
  },

  {
    name: '‚ùå ERROR: Ph√≤ng c√≥ subroom nh∆∞ng kh√¥ng ch·ªâ ƒë·ªãnh subRoomId',
    request: {
      method: 'POST',
      url: 'http://localhost:3002/api/slots/reassign-staff',
      body: {
        roomId: '68dd31c43df7b61e7b509e70', // Ph√≤ng C√ì subroom
        // Kh√¥ng g·ª≠i subRoomId
        quarter: 4,
        year: 2025, 
        shifts: ['Ca S√°ng'],
        dentistIds: ['68d9f8bab5a75931c6cd0d7d'],
        nurseIds: []
      }
    },
    expectedError: 'Ph√≤ng "[T√äN PH√íNG]" c√≥ X subroom. Vui l√≤ng ch·ªâ ƒë·ªãnh subRoomId c·ª• th·ªÉ: [DANH S√ÅCH ID + T√äN]'
  },

  {
    name: '‚ùå ERROR: subRoomId kh√¥ng thu·ªôc v·ªÅ roomId',
    request: {
      method: 'POST',
      url: 'http://localhost:3002/api/slots/reassign-staff', 
      body: {
        roomId: '68dd31c43df7b61e7b509e70', // Ph√≤ng A
        subRoomId: '68dd2e1d3df7b61e7b509e99', // SubRoom thu·ªôc ph√≤ng B
        quarter: 4,
        year: 2025,
        shifts: ['Ca S√°ng'],
        dentistIds: ['68d9f8bab5a75931c6cd0d7d'],
        nurseIds: []
      }
    },
    expectedError: 'SubRoom kh√¥ng thu·ªôc v·ªÅ ph√≤ng "[T√äN PH√íNG]". Vui l√≤ng ki·ªÉm tra l·∫°i subRoomId.'
  }
];

// ===========================================  
// TEST 2: API assign-staff v·ªõi subRoom logic
// ===========================================

const testAssignStaffSubRoomScenarios = [
  {
    name: '‚úÖ SUCCESS: Assign staff v·ªõi subRoom ƒë√∫ng',
    request: {
      method: 'POST',
      url: 'http://localhost:3002/api/slots/assign-staff',
      body: {
        roomId: '68dd31c43df7b61e7b509e70',
        subRoomId: '68dd2e1d3df7b61e7b509e42',
        quarter: 4,
        year: 2025,
        shifts: ['Ca Chi·ªÅu'],
        dentistIds: ['68d9f8bab5a75931c6cd0d7d'],
        nurseIds: ['68dd3147327b922b6119b8ed']
      }
    },
    expectedResult: 'SUCCESS - Ph√¢n c√¥ng th√†nh c√¥ng'
  },

  // T∆∞∆°ng t·ª± c√°c error cases nh∆∞ reassign-staff
];

// ===========================================
// TEST 3: API PATCH /staff v·ªõi multiple slots validation  
// ===========================================

const testUpdateSlotStaffScenarios = [
  {
    name: '‚úÖ SUCCESS: Update slots c√πng room/subroom',
    request: {
      method: 'PATCH',
      url: 'http://localhost:3002/api/slots/staff',
      body: {
        slotIds: [
          '650f0b1a2c3d4e5f67890123', // C√πng room + subroom
          '650f0b1a2c3d4e5f67890124'  // C√πng room + subroom
        ],
        dentistId: '68d9f8bab5a75931c6cd0d7d'
      }
    },
    expectedResult: 'SUCCESS - C·∫≠p nh·∫≠t th√†nh c√¥ng'
  },

  {
    name: '‚ùå ERROR: Update slots kh√°c room',
    request: {
      method: 'PATCH',
      url: 'http://localhost:3002/api/slots/staff',
      body: {
        slotIds: [
          '650f0b1a2c3d4e5f67890123', // Room A
          '650f0b1a2c3d4e5f67890999'  // Room B  
        ],
        dentistId: '68d9f8bab5a75931c6cd0d7d'
      }
    },
    expectedError: 'T·∫•t c·∫£ slot ph·∫£i thu·ªôc c√πng m·ªôt ph√≤ng. Slot [ID] thu·ªôc ph√≤ng kh√°c.'
  },

  {
    name: '‚ùå ERROR: Update slots kh√°c subroom',
    request: {
      method: 'PATCH',
      url: 'http://localhost:3002/api/slots/staff',
      body: {
        slotIds: [
          '650f0b1a2c3d4e5f67890123', // C√πng room, subroom A
          '650f0b1a2c3d4e5f67890888'  // C√πng room, subroom B
        ],
        dentistId: '68d9f8bab5a75931c6cd0d7d'
      }
    },
    expectedError: 'T·∫•t c·∫£ slot ph·∫£i thu·ªôc c√πng subroom. Slot ƒë·∫ßu ti√™n c√≥ subroom X, nh∆∞ng slot [ID] c√≥ subroom Y.'
  }
];

// ===========================================
// EXECUTION COMMANDS  
// ===========================================

console.log(`
üìã TEST SCENARIOS PREPARED:

1Ô∏è‚É£ REASSIGN-STAFF API (${testReassignStaffSubRoomScenarios.length} test cases):
   ‚úÖ Ph√≤ng c√≥ subroom + ƒë√∫ng subRoomId  
   ‚ùå Ph√≤ng kh√¥ng c√≥ subroom nh∆∞ng g·ª≠i subRoomId
   ‚ùå Ph√≤ng c√≥ subroom nh∆∞ng kh√¥ng ch·ªâ ƒë·ªãnh
   ‚ùå subRoomId kh√¥ng thu·ªôc v·ªÅ roomId

2Ô∏è‚É£ ASSIGN-STAFF API (${testAssignStaffSubRoomScenarios.length} test case):
   ‚úÖ T∆∞∆°ng t·ª± reassign-staff logic

3Ô∏è‚É£ UPDATE-SLOT-STAFF API (${testUpdateSlotStaffScenarios.length} test cases):
   ‚úÖ Slots c√πng room/subroom
   ‚ùå Slots kh√°c room  
   ‚ùå Slots kh√°c subroom

üöÄ TO RUN TESTS:
   node TEST_SLOT_SUBROOM_LOGIC.js

üìù NOTES:
   - Thay th·∫ø roomId/subRoomId/slotIds th·∫≠t t·ª´ database
   - Ki·ªÉm tra users_cache v√† rooms_cache c√≥ data
   - ƒê·∫£m b·∫£o c√≥ l·ªãch l√†m vi·ªác cho qu√Ω 4/2025
   - Test v·ªõi user role manager/admin
`);

module.exports = {
  testReassignStaffSubRoomScenarios,
  testAssignStaffSubRoomScenarios, 
  testUpdateSlotStaffScenarios
};